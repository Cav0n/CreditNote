<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace CreditNote\Controller\Base;

use CreditNote\CreditNote;
use Thelia\Controller\Admin\BaseAdminController;
use Thelia\Form\Exception\FormValidationException;
use CreditNote\Model\Config\CreditNoteConfigValue;

/**
 * Class CreditNoteConfigController
 * @package CreditNote\Controller\Base
 * @author TheliaStudio
 */
class CreditNoteConfigController extends BaseAdminController
{
    public function defaultAction()
    {
        return $this->render("creditnote-configuration");
    }

    public function saveAction()
    {
        $baseForm = $this->createForm("creditnote.configuration");

        $errorMessage = null;

        try {
            $form = $this->validateForm($baseForm);
            $data = $form->getData();

            CreditNote::setConfigValue(CreditNoteConfigValue::COUPON_CODE_DURATION, is_bool($data["coupon_code_duration"]) ? (int) ($data["coupon_code_duration"]) : $data["coupon_code_duration"]);
            CreditNote::setConfigValue(CreditNoteConfigValue::COUPON_CODE_PREFIX, is_bool($data["coupon_code_prefix"]) ? (int) ($data["coupon_code_prefix"]) : $data["coupon_code_prefix"]);
            CreditNote::setConfigValue(CreditNoteConfigValue::COUPON_CODE_RESTRICTED_TO_ORIGINAL_CUSTOMER, is_bool($data["coupon_code_restricted_to_original_customer"]) ? (int) ($data["coupon_code_restricted_to_original_customer"]) : $data["coupon_code_restricted_to_original_customer"]);
        } catch (FormValidationException $ex) {
            // Invalid data entered
            $errorMessage = $this->createStandardFormValidationErrorMessage($ex);
        } catch (\Exception $ex) {
            // Any other error
            $errorMessage = $this->getTranslator()->trans('Sorry, an error occurred: %err', ['%err' => $ex->getMessage()], [], CreditNote::MESSAGE_DOMAIN);
        }

        if (null !== $errorMessage) {
            // Mark the form as with error
            $baseForm->setErrorMessage($errorMessage);

            // Send the form and the error to the parser
            $this->getParserContext()
                ->addForm($baseForm)
                ->setGeneralError($errorMessage)
            ;
        } else {
            $this->getParserContext()
                ->set("success", true)
            ;
        }

        return $this->defaultAction();
    }
}
